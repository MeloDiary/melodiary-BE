openapi: 3.0.0
info:
  title: Melodiary API - OpenAPI 3.0
  description: |
    ### 당신의 하루를 음악과 함께 기록하세요.
  contact:
    email: melodiary@gmail.com
  version: 1.0.0
servers:
  - url: https://api.melodiary.site/v1
tags:
  - name: diary
    description: 일기 관련 API
  - name: user
    description: 유저 관련 API

paths:
  /user/signUp:
    post:
      tags:
        - user
      summary: OAuth 회원가입
      description: |
        회원가입 성공한 경우 201 코드와 JWT를 리턴합니다.

        그 이외의 경우 500 코드를 리턴합니다.
      requestBody:
        description: |
          OAuth 서비스 이름

          권한부여코드 (Authorization code)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpBody'
        required: true
      responses:
        '201':
          description: 회원가입 및 유저 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTResponse'
        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'

  /user/signIn:
    post:
      tags:
        - user
      summary: OAuth 로그인
      description: |
        로그인 성공한 경우 201 코드와 JWT를 리턴합니다.

        가입되지 않은 사용자일 경우 404 코드를 리턴합니다. 이 경우 회원가입을 진행해야 합니다.

        그 이외의 경우 500 코드를 리턴합니다.
      requestBody:
        description: |
          OAuth 서비스 이름

          권한부여코드(Authorization code)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpBody'
        required: true
      responses:
        '200':
          description: 로그인 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTResponse'
        '404':
          description: 해당 유저의 계정이 없음 (회원가입 필요)
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Cannot find user account'
        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'

  /user/tokenReissue:
    post:
      tags:
        - user
      summary: Access token 재발급
      description: |
        Access token 재발급에 성공한 경우 200 코드와 access token을 리턴합니다.

        Refresh token이 만료된 경우 401 코드를 리턴합니다. 이 경우 다시 로그인해야 합니다.

        그 이외의 경우 500 코드를 리턴합니다.
      requestBody:
        description: Refresh token
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshToken'
        required: true
      responses:
        '200':
          description: Access token 재발급 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
        '401':
          description: Refresh token 만료. 재 로그인 해야함
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The refresh token is expired'

        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'

  /user/checkNickname:
    post:
      tags:
        - user
      summary: 닉네임 중복확인
      description: |
        사용 가능한 닉네임일 경우 200 코드를 리턴합니다.

        중복된 닉네임일 경우 400 코드를 리턴합니다.

        그 이외의 경우 500 코드를 리턴합니다.
      requestBody:
        description: 중복 확인할 닉네임
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Nickname'
        required: true
      responses:
        '200':
          description: 닉네임 사용 가능
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The nickname is valid'
        '400':
          description: 닉네임 사용 불가
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The nickname is invalid'
        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'

  /user/info:
    get:
      tags:
        - user
      summary: 사용자 정보 요청
      description: |
        사용자 정보를 가져오는데 성공한 경우 200코드와 사용자의 정보를 리턴합니다.

        그 이외의 경우 500 코드를 리턴합니다.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: 사용자 정보 가져오기 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'

  /user/changeProfileImg:
    put:
      tags:
        - user
      summary: 사용자 프로필 이미지 변경
      description: |
        프로필 이미지 변경에 성공한 경우 200 코드를 리턴합니다.

        요청의 이미지 URL이 유효하지 않은 경우 400 코드를 리턴합니다.

        그 이외의 경우 500 코드를 리턴합니다.
      security:
        - BearerAuth: []
      requestBody:
        description: 변경할 이미지의 URL
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImgURL'
        required: true
      responses:
        '200':
          description: 프로필 이미지 변경 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Successfully changed the profile image'
        '400':
          description: 유효하지 않은 URL
          content:
            applicaiton/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The URL is invalid'
        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'

  /user/logout:
    put:
      tags:
        - user
      summary: Delete the user's JWT at server-side
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successfully deleted the user's JWT in Redis
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: "user's JWT deleted"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Message:
      type: object
      properties:
        message:
          type: string
          example: 'The link is valid'

    SignUpBody:
      type: object
      properties:
        serviceProvider:
          type: string
          example: 'Google'
        authorizationCode:
          type: string
          example: 'example code'

    JWTResponse:
      type: object
      properties:
        accessToken:
          type: string
          example: 'Access token'
        refreshToken:
          type: string
          example: 'Refresh token'

    Nickname:
      type: object
      properties:
        nickname:
          type: string
          example: 'musseuk'

    AccessToken:
      type: object
      properties:
        accessToken:
          type: string
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'

    RefreshToken:
      type: object
      properties:
        refreshToken:
          type: string
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'

    UserInfo:
      type: object
      properties:
        id:
          type: integer
          example: 58
        profileImgLink:
          type: string
          example: 'img link example'
        nickname:
          type: string
          example: 'musseuk'
        diaryCount:
          type: integer
          example: 27
        emailAddress:
          type: string
          example: 'musseuk@example.com'

    ImgURL:
      type: object
      properties:
        URL:
          type: string
          example: 'image url example'

  parameters:
    PageNum:
      name: pageNum
      in: query
      required: true
      schema:
        type: integer
        example: 6

    PlaylistId:
      name: playlistId
      in: path
      required: true
      schema:
        type: integer
        example: 428682

    SearchQuery:
      name: searchQuery
      in: query
      required: true
      schema:
        type: string
        example: 'carrie europe'
