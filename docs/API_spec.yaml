openapi: 3.0.0
info:
  title: Melodiary API - OpenAPI 3.0
  description: |
    ### 당신의 하루를 음악과 함께 기록하세요.
  contact:
    email: melodiary@gmail.com
  version: 1.0.3
servers:
  - url: https://api.melodiary.site
tags:
  - name: user
    description: 유저 관련 API
  - name: auth
    description: 인증 관련 API
  - name: mate
    description: 친구 관련 API
  - name: notification
    description: 알림 관련 API
  - name: diary
    description: 일기 관련 API
  - name: comment
    description: 댓글 관련 API
  - name: weather
    description: 날씨 관련 API
  - name: music
    description: 음악 관련 API
  - name: AWS
    description: AWS 관련 API

paths:
  /api/users:
    get:
      tags:
        - user
      summary: 닉네임이나 이메일 주소로 사용자 검색
      description: |
        query string에 검색할 사용자의 닉네임이나 이메일을 담아야합니다.

        사용자 검색에 성공한 경우 200 코드와 검색된 사용자의 정보를 리턴합니다.

        요청 구문이 잘못된 경우 400 코드를 리턴합니다.

        사용자가 존재하지 않는 경우 404 코드를 리턴합니다.

        그 이외의 경우 500 코드를 리턴합니다.
      parameters:
        - $ref: '#/components/parameters/UserNickname'
        - $ref: '#/components/parameters/UserEmail'
      responses:
        '200':
          description: 검색된 사용자 정보
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MateInfo'
        '400':
          description: 잘못된 요청 구문
          content:
            applicaiton/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Bad request'
        '404':
          description: 존재하지 않는 사용자
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Not found such user'
        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'
    post:
      tags:
        - user
      summary: 회원가입
      description: |
        회원가입 성공한 경우 201 코드와 사용자 ID, JWT를 리턴합니다.

        요청 구문이 잘못된 경우 400 코드를 리턴합니다.

        이미 존재하는 사용자일 경우 409 코드를 리턴합니다. 이 경우 로그인 해야합니다.

        그 이외의 경우 500 코드를 리턴합니다.
      requestBody:
        description: |
          OAuth 서비스 이름

          권한부여코드 (Authorization code)

          클라이언트에서 설정한 state
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpBody'
        required: true
      responses:
        '201':
          description: 회원가입 및 유저 생성 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/UserID'
                  - $ref: '#/components/schemas/AccessToken'
                  - $ref: '#/components/schemas/RefreshToken'
        '400':
          description: 잘못된 요청 구문
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Bad request'
        '409':
          description: 사용자가 이미 존재함
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The user already exists'
        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'

  /api/users/{userID}:
    get:
      tags:
        - user
      summary: 사용자 정보 확인
      description: |
        path에 사용자ID를 담아야합니다.

        사용자 정보를 가져오는데 성공한 경우 200 코드와 사용자의 정보를 리턴합니다.

        요청 구문이 잘못된 경우 400 코드를 리턴합니다.

        Access token이 유효하지 않을 경우 401 코드를 리턴합니다. 이 경우 access token을 재발급 받아야 합니다.

        다른 사용자의 정보에 접근하는 경우 403 코드를 리턴합니다.

        사용자가 존재하지 않는 경우 404 코드를 리턴합니다.

        그 이외의 경우 500 코드를 리턴합니다.
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserID'
      responses:
        '200':
          description: 사용자 정보 가져오기 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '400':
          description: 잘못된 요청 구문
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Bad request'
        '401':
          description: Access token이 유효하지 않거나 만료됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The access token is invalid or expired'
        '403':
          description: 액세스 금지됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Forbidden: User ID mismatch'
        '404':
          description: 존재하지 않는 사용자
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Not found such user'
        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'
    delete:
      tags:
        - user
      summary: 회원 탈퇴
      description: |
        path에 회원 탈퇴할 사용자의 ID를 담아야합니다.

        회원 탈퇴 처리가 성공한 경우 200 코드를 리턴합니다.

        요청 구문이 잘못된 경우 400 코드를 리턴합니다.

        Access token이 유효하지 않을 경우 401 코드를 리턴합니다. 이 경우 access token을 재발급 받아야 합니다.

        다른 사용자의 정보에 접근하는 경우 403 코드를 리턴합니다.

        사용자가 존재하지 않는 경우 404 코드를 리턴합니다.

        그 이외의 경우 500 코드를 리턴합니다.
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserID'
      responses:
        '200':
          description: 회원 탈퇴 처리 및 정보 삭제 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The user has deleted'
        '400':
          description: 잘못된 요청 구문
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Bad request'
        '401':
          description: Access token이 유효하지 않거나 만료됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The access token is invalid or expired'
        '403':
          description: 액세스 금지됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Forbidden: User ID mismatch'
        '404':
          description: 존재하지 않는 사용자
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Not found such user'
        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'

  /api/users/nicknames:
    get:
      tags:
        - user
      summary: 닉네임 중복확인
      description: |
        query string에 중복확인할 닉네임을 담아야 합니다.

        사용 가능한 닉네임일 경우 200 코드를 리턴합니다.

        요청 구문이 잘못된 경우 400 코드를 리턴합니다.

        중복된 닉네임일 경우 409 코드를 리턴합니다.

        그 이외의 경우 500 코드를 리턴합니다.
      parameters:
        - $ref: '#/components/parameters/UserNickname'
      responses:
        '200':
          description: 닉네임 사용 가능
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The nickname is valid'
        '400':
          description: 잘못된 요청 구문
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Bad request'
        '409':
          description: 중복된 닉네임
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The nickname is duplicated'
        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'

  /api/users/{userID}/nickname:
    post:
      tags:
        - user
      summary: 사용자 닉네임 등록
      description: |
        path에 사용자ID를 담아야합니다.

        닉네임 등록에 성공한 경우 201 코드를 리턴합니다.

        요청 구문이 잘못된 경우 400 코드를 리턴합니다.

        Access token이 유효하지 않을 경우 401 코드를 리턴합니다. 이 경우 access token을 재발급 받아야 합니다.

        다른 사용자의 정보에 접근하는 경우 403 코드를 리턴합니다.

        사용자가 존재하지 않는 경우 404 코드를 리턴합니다.

        중복된 닉네임일 경우 409 코드를 리턴합니다.

        그 이외의 경우 500 코드를 리턴합니다.
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserID'
      requestBody:
        description: 등록할 닉네임
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserNickname'
        required: true
      responses:
        '201':
          description: 닉네임 등록 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Successfully posted the nickname'
        '400':
          description: 잘못된 요청 구문
          content:
            applicaiton/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Bad request'
        '401':
          description: Access token이 유효하지 않거나 만료됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The access token is invalid or expired'
        '403':
          description: 액세스 금지됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Forbidden: User ID mismatch'
        '404':
          description: 존재하지 않는 사용자
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Not found such user'
        '409':
          description: 중복된 닉네임
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The nickname is duplicated'
        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'
    put:
      tags:
        - user
      summary: 사용자 닉네임 변경
      description: |
        path에 사용자ID를 담아야합니다.

        닉네임 변경에 성공한 경우 200 코드를 리턴합니다.

        요청 구문이 잘못된 경우 400 코드를 리턴합니다.

        Access token이 유효하지 않을 경우 401 코드를 리턴합니다. 이 경우 access token을 재발급 받아야 합니다.

        다른 사용자의 정보에 접근하는 경우 403 코드를 리턴합니다.

        사용자가 존재하지 않는 경우 404 코드를 리턴합니다.

        중복된 닉네임일 경우 409 코드를 리턴합니다.

        그 이외의 경우 500 코드를 리턴합니다.
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserID'
      requestBody:
        description: 변경할 닉네임
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserNickname'
        required: true
      responses:
        '200':
          description: 닉네임 변경 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Successfully changed the nickname'
        '400':
          description: 잘못된 요청 구문
          content:
            applicaiton/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Bad request'
        '401':
          description: Access token이 유효하지 않거나 만료됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The access token is invalid or expired'
        '403':
          description: 액세스 금지됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Forbidden: User ID mismatch'
        '404':
          description: 존재하지 않는 사용자
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Not found such user'
        '409':
          description: 중복된 닉네임
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The nickname is duplicated'
        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'

  /api/users/{userID}/profile-image:
    post:
      tags:
        - user
      summary: 사용자 프로필 사진 등록
      description: |
        path에 사용자ID를 담아야합니다.

        프로필 사진 등록에 성공한 경우 201 코드를 리턴합니다.

        요청 구문이 잘못된 경우 400 코드를 리턴합니다.

        Access token이 유효하지 않을 경우 401 코드를 리턴합니다. 이 경우 access token을 재발급 받아야 합니다.

        다른 사용자의 정보에 접근하는 경우 403 코드를 리턴합니다.

        사용자가 존재하지 않는 경우 404 코드를 리턴합니다.

        그 이외의 경우 500 코드를 리턴합니다.
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserID'
      requestBody:
        description: 등록할 이미지의 URL
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImgURL'
        required: true
      responses:
        '201':
          description: 프로필 이미지 등록 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Successfully posted the profile image'
        '400':
          description: 잘못된 요청
          content:
            applicaiton/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Bad request'
        '401':
          description: Access token이 유효하지 않거나 만료됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The access token is invalid or expired'
        '403':
          description: 액세스 금지됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Forbidden: User ID mismatch'
        '404':
          description: 존재하지 않는 사용자
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Not found such user'
        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'
    put:
      tags:
        - user
      summary: 사용자 프로필 사진 변경
      description: |
        path에 사용자ID를 담아야합니다.

        프로필 사진 변경에 성공한 경우 200 코드를 리턴합니다.

        요청 구문이 잘못된 경우 400 코드를 리턴합니다.

        Access token이 유효하지 않을 경우 401 코드를 리턴합니다. 이 경우 access token을 재발급 받아야 합니다.

        다른 사용자의 정보에 접근하는 경우 403 코드를 리턴합니다.

        사용자가 존재하지 않는 경우 404 코드를 리턴합니다.

        그 이외의 경우 500 코드를 리턴합니다.
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserID'
      requestBody:
        description: 변경할 이미지의 URL
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImgURL'
        required: true
      responses:
        '200':
          description: 프로필 이미지 변경 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Successfully changed the profile image'
        '400':
          description: 잘못된 요청
          content:
            applicaiton/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Bad request'
        '401':
          description: Access token이 유효하지 않거나 만료됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The access token is invalid or expired'
        '403':
          description: 액세스 금지됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Forbidden: User ID mismatch'
        '404':
          description: 존재하지 않는 사용자
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Not found such user'
        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'

  /api/users/{userID}/background-image:
    post:
      tags:
        - user
      summary: 마이페이지 배경 사진 등록
      description: |
        path에 사용자ID를 담아야합니다.

        마이페이지 배경 사진 등록에 성공한 경우 200 코드를 리턴합니다.

        요청 구문이 잘못된 경우 400 코드를 리턴합니다.

        Access token이 유효하지 않을 경우 401 코드를 리턴합니다. 이 경우 access token을 재발급 받아야 합니다.

        다른 사용자의 정보에 접근하는 경우 403 코드를 리턴합니다.

        사용자가 존재하지 않는 경우 404 코드를 리턴합니다.

        그 이외의 경우 500 코드를 리턴합니다.
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserID'
      requestBody:
        description: 등록할 배경 이미지의 URL
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImgURL'
        required: true
      responses:
        '200':
          description: 마이페이지 배경 이미지 등록 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Successfully posted the profile background image'
        '400':
          description: 잘못된 요청
          content:
            applicaiton/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Bad request'
        '401':
          description: Access token이 유효하지 않거나 만료됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The access token is invalid or expired'
        '403':
          description: 액세스 금지됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Forbidden: User ID mismatch'
        '404':
          description: 존재하지 않는 사용자
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Not found such user'
        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'
    put:
      tags:
        - user
      summary: 마이페이지 배경 사진 변경
      description: |
        path에 사용자ID를 담아야합니다.

        마이페이지 배경 사진 변경에 성공한 경우 200 코드를 리턴합니다.

        요청 구문이 잘못된 경우 400 코드를 리턴합니다.

        Access token이 유효하지 않을 경우 401 코드를 리턴합니다. 이 경우 access token을 재발급 받아야 합니다.

        다른 사용자의 정보에 접근하는 경우 403 코드를 리턴합니다.

        사용자가 존재하지 않는 경우 404 코드를 리턴합니다.

        그 이외의 경우 500 코드를 리턴합니다.
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserID'
      requestBody:
        description: 변경할 배경 이미지의 URL
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImgURL'
        required: true
      responses:
        '200':
          description: 마이페이지 배경 이미지 변경 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Successfully changed the profile background image'
        '400':
          description: 잘못된 요청
          content:
            applicaiton/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Bad request'
        '401':
          description: Access token이 유효하지 않거나 만료됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The access token is invalid or expired'
        '403':
          description: 액세스 금지됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Forbidden: User ID mismatch'
        '404':
          description: 존재하지 않는 사용자
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Not found such user'
        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'

  /api/users/login:
    post:
      tags:
        - auth
      summary: 로그인
      description: |
        로그인 성공한 경우 200 코드와 JWT를 리턴합니다.

        요청 구문이 잘못된 경우 400 코드를 리턴합니다.

        가입되지 않은 사용자일 경우 404 코드를 리턴합니다. 이 경우 회원가입을 진행해야 합니다.

        그 이외의 경우 500 코드를 리턴합니다.
      requestBody:
        description: |
          OAuth 서비스 이름

          권한부여코드(Authorization code)

          클라이언트에서 설정한 state
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpBody'
        required: true
      responses:
        '200':
          description: 로그인 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/UserID'
                  - $ref: '#/components/schemas/AccessToken'
                  - $ref: '#/components/schemas/RefreshToken'
        '400':
          description: 잘못된 요청 구문
          content:
            applicaiton/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Bad request'
        '404':
          description: 해당 유저의 계정이 없음 (회원가입 필요)
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Cannot find user account'
        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'

  /api/users/{userID}/logout:
    post:
      tags:
        - auth
      summary: 로그아웃
      description: |
        path에 사용자ID를 담아야합니다.

        사용자 로그아웃에 성공한 경우 200 코드를 리턴합니다.

        요청 구문이 잘못된 경우 400 코드를 리턴합니다.

        Access token이 유효하지 않을 경우 401 코드를 리턴합니다. 이 경우 access token을 재발급 받아야 합니다.

        다른 사용자의 정보에 접근하는 경우 403 코드를 리턴합니다.

        사용자가 존재하지 않는 경우 404 코드를 리턴합니다.

        그 이외의 경우 500 코드를 리턴합니다.
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserID'
      responses:
        '200':
          description: 사용자 JWT 삭제 및 로그아웃 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Successfully log out'
        '400':
          description: 잘못된 요청 구문
          content:
            applicaiton/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Bad request'
        '401':
          description: Access token이 유효하지 않거나 만료됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The access token is invalid or expired'
        '403':
          description: 액세스 금지됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Forbidden: User ID mismatch'
        '404':
          description: 존재하지 않는 사용자
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Not found such user'
        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'

  /api/users/{userID}/token-refresh:
    post:
      tags:
        - auth
      summary: Access token 재발급
      description: |
        Access token 재발급에 성공한 경우 200 코드와 재발급된 access token과 refresh token을 리턴합니다.

        요청 구문이 잘못된 경우 400 코드를 리턴합니다.

        Refresh token이 만료된 경우 401 코드를 리턴합니다. 이 경우 다시 로그인해야 합니다.

        사용자가 존재하지 않는 경우 404 코드를 리턴합니다.

        그 이외의 경우 500 코드를 리턴합니다.
      parameters:
        - $ref: '#/components/parameters/UserID'
      requestBody:
        description: Refresh token
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshToken'
        required: true
      responses:
        '200':
          description: Access token 재발급 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/UserID'
                  - $ref: '#/components/schemas/AccessToken'
                  - $ref: '#/components/schemas/RefreshToken'
        '400':
          description: 잘못된 요청 구문
          content:
            applicaiton/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Bad request'
        '401':
          description: Refresh token 만료. 재 로그인 해야함
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The refresh token is expired'
        '404':
          description: 존재하지 않는 사용자
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Not found such user'
        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'

  /api/users/{userID}/mates:
    get:
      tags:
        - mate
      summary: 친구 목록 확인
      description: |
        path에 사용자ID를 담아야합니다.

        친구 목록을 가져오는데 성공한 경우 200 코드와 친구 목록을 리턴합니다.

        Access token이 유효하지 않을 경우 401 코드를 리턴합니다. 이 경우 access token을 재발급 받아야 합니다.

        다른 사용자의 정보에 접근하는 경우 403 코드를 리턴합니다.

        친구로 등록된 사용자가 없는 경우 404 코드를 리턴합니다.

        그 이외의 경우 500 코드를 리턴합니다.
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserID'
      responses:
        '200':
          description: 친구 목록 가져오기 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MateInfo'
        '401':
          description: Access token이 유효하지 않거나 만료됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The access token is invalid or expired'
        '403':
          description: 액세스 금지됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Forbidden: User ID mismatch'
        '404':
          description: 친구로 등록된 사용자가 없음
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Not found any mate'
        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'
    post:
      tags:
        - mate
      summary: 친구 요청 보내기
      description: |
        path에 친구 요청 보내는 사용자의 ID를 담아야 합니다.

        친구 요청 보내기 성공한 경우 201 코드와 해당 친구요청ID를 리턴합니다.

        요청 구문이 잘못된 경우 400 코드를 리턴합니다.

        Access token이 유효하지 않을 경우 401 코드를 리턴합니다. 이 경우 access token을 재발급 받아야 합니다.

        다른 사용자의 정보에 접근하는 경우 403 코드를 리턴합니다.

        친구 요청 받을 사용자가 존재하지 않는 경우 404 코드를 리턴합니다.

        같은 사용자에게 이미 친구 요청을 보낸 경우 409 코드를 리턴합니다.

        그 이외의 경우 500 코드를 리턴합니다.
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserID'
      requestBody:
        description: 친구 요청 받는 사용자의 ID
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MateID'
        required: true
      responses:
        '201':
          description: 친구 요청 보내기 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestID'
        '400':
          description: 잘못된 요청 구문
          content:
            applicaiton/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Bad request'
        '401':
          description: Access token이 유효하지 않거나 만료됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The access token is invalid or expired'
        '403':
          description: 액세스 금지됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Forbidden: User ID mismatch'
        '404':
          description: 친구 요청 받을 사용자가 존재하지 않음
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Not found such user'
        '409':
          description: 같은 사용자에게 이미 친구 요청을 보냈음
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Already sent the mate request'
        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'

  /api/users/{userID}/mates/{mateID}:
    delete:
      tags:
        - mate
      summary: 친구 삭제
      description: |
        path에 사용자ID와 친구ID를 담아야합니다.

        친구 삭제 처리가 성공한 경우 200 코드를 리턴합니다.

        요청 구문이 잘못된 경우 400 코드를 리턴합니다.

        Access token이 유효하지 않을 경우 401 코드를 리턴합니다. 이 경우 access token을 재발급 받아야 합니다.

        다른 사용자의 정보에 접근하는 경우 403 코드를 리턴합니다.

        친구ID에 해당하는 사용자가 존재하지 않는 경우 404 코드를 리턴합니다.

        그 이외의 경우 500 코드를 리턴합니다.
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/MateID'
      responses:
        '200':
          description: 친구 삭제 처리 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Successfully unmated'
        '400':
          description: 잘못된 요청 구문
          content:
            applicaiton/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Bad request'
        '401':
          description: Access token이 유효하지 않거나 만료됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The access token is invalid or expired'
        '403':
          description: 액세스 금지됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Forbidden: User ID mismatch'
        '404':
          description: 친구ID에 해당하는 사용자가 존재하지 않음
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Not found such user'
        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'

  /api/users/{userID}/mates/requests/received:
    get:
      tags:
        - mate
      summary: 받은 친구 요청 목록 확인
      description: |
        path에 사용자ID를 담아야합니다.

        받은 친구 요청 목록을 가져오는데 성공한 경우 200 코드와 받은 친구 요청 목록을 리턴합니다.

        요청 구문이 잘못된 경우 400 코드를 리턴합니다.

        Access token이 유효하지 않을 경우 401 코드를 리턴합니다. 이 경우 access token을 재발급 받아야 합니다.

        다른 사용자의 정보에 접근하는 경우 403 코드를 리턴합니다.

        받은 친구 요청이 없는 경우 404 코드를 리턴합니다.

        그 이외의 경우 500 코드를 리턴합니다.
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserID'
      responses:
        '200':
          description: 받은 친구 요청 목록 가져오기 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RequestInfo'
        '400':
          description: 잘못된 요청 구문
          content:
            applicaiton/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Bad request'
        '401':
          description: Access token이 유효하지 않거나 만료됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The access token is invalid or expired'
        '403':
          description: 액세스 금지됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Forbidden: User ID mismatch'
        '404':
          description: 받은 친구 요청이 없음
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Not found any received request'
        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'

  /api/users/{userID}/mates/requests/sent:
    get:
      tags:
        - mate
      summary: 보낸 친구 요청 목록 확인
      description: |
        path에 사용자ID를 담아야합니다.

        보낸 친구 요청 목록을 가져오는데 성공한 경우 200 코드와 보낸 친구 요청 목록을 리턴합니다.

        요청 구문이 잘못된 경우 400 코드를 리턴합니다.

        Access token이 유효하지 않을 경우 401 코드를 리턴합니다. 이 경우 access token을 재발급 받아야 합니다.

        다른 사용자의 정보에 접근하는 경우 403 코드를 리턴합니다.

        보낸 친구 요청이 없는 경우 404 코드를 리턴합니다.

        그 이외의 경우 500 코드를 리턴합니다.
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserID'
      responses:
        '200':
          description: 보낸 친구 요청 목록 가져오기 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RequestInfo'
        '400':
          description: 잘못된 요청 구문
          content:
            applicaiton/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Bad request'
        '401':
          description: Access token이 유효하지 않거나 만료됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The access token is invalid or expired'
        '403':
          description: 액세스 금지됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Forbidden: User ID mismatch'
        '404':
          description: 보낸 친구 요청이 없음
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Not found any sent request'
        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'

  /api/users/{userID}/mates/requests/{requestID}:
    put:
      tags:
        - mate
      summary: 친구 요청 수락
      description: |
        path에 사용자ID와 친구요청ID를 담아야합니다.

        친구 요청 수락 처리가 성공한 경우 200 코드를 리턴합니다.

        요청 구문이 잘못된 경우 400 코드를 리턴합니다.

        Access token이 유효하지 않을 경우 401 코드를 리턴합니다. 이 경우 access token을 재발급 받아야 합니다.

        다른 사용자의 정보에 접근하는 경우 403 코드를 리턴합니다.

        친구요청ID에 해당하는 요청이 존재하지 않는 경우 404 코드를 리턴합니다.

        그 이외의 경우 500 코드를 리턴합니다.
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/RequestID'
      responses:
        '200':
          description: 친구 요청 수락 처리 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Successfully accepted the mate request'
        '400':
          description: 잘못된 요청 구문
          content:
            applicaiton/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Bad request'
        '401':
          description: Access token이 유효하지 않거나 만료됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The access token is invalid or expired'
        '403':
          description: 액세스 금지됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Forbidden: User ID mismatch'
        '404':
          description: 친구요청ID에 해당하는 요청이 존재하지 않음
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Not found such request'
        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'
    delete:
      tags:
        - mate
      summary: 친구 요청 거절
      description: |
        path에 사용자ID와 친구요청ID를 담아야합니다.

        친구 요청 거절 처리가 성공한 경우 200 코드를 리턴합니다.

        요청 구문이 잘못된 경우 400 코드를 리턴합니다.

        Access token이 유효하지 않을 경우 401 코드를 리턴합니다. 이 경우 access token을 재발급 받아야 합니다.

        다른 사용자의 정보에 접근하는 경우 403 코드를 리턴합니다.

        친구요청ID에 해당하는 요청이 존재하지 않는 경우 404 코드를 리턴합니다.

        그 이외의 경우 500 코드를 리턴합니다.
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/RequestID'
      responses:
        '200':
          description: 친구 요청 거절 처리 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Successfully rejected the mate request'
        '400':
          description: 잘못된 요청 구문
          content:
            applicaiton/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Bad request'
        '401':
          description: Access token이 유효하지 않거나 만료됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The access token is invalid or expired'
        '403':
          description: 액세스 금지됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Forbidden: User ID mismatch'
        '404':
          description: 친구요청ID에 해당하는 요청이 존재하지 않음
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Not found such request'
        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'

  /api/users/{userID}/notifications/unread:
    get:
      tags:
        - notification
      summary: 읽지 않은 알림 확인
      description: |
        path에 사용자ID를 담아야합니다.

        읽지 않은 알림이 있는 경우 200 코드와 읽지 않은 알림 목록을 리턴합니다.

        요청 구문이 잘못된 경우 400 코드를 리턴합니다.

        Access token이 유효하지 않을 경우 401 코드를 리턴합니다. 이 경우 access token을 재발급 받아야 합니다.

        다른 사용자의 정보에 접근하는 경우 403 코드를 리턴합니다.

        읽지 않은 알림이 없는 경우 404 코드를 리턴합니다.

        그 이외의 경우 500 코드를 리턴합니다.
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserID'
      responses:
        '200':
          description: 읽지 않은 알림 목록
          content:
            application/json:
              examples:
                example1:
                  summary: '일기 관련 알림'
                  value:
                    - notification_id: 793
                      content: 'someone commented on your diary'
                      diary_id: 2940
                      category: 'diary'
                      date: '2024-07-26'
                example2:
                  summary: '친구 관련 알림'
                  value:
                    - notification_id: 728
                      content: 'someone wants to be friends with you'
                      category: 'mate'
                      date: '2024-07-26'
        '400':
          description: 잘못된 요청 구문
          content:
            applicaiton/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Bad request'
        '401':
          description: Access token이 유효하지 않거나 만료됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The access token is invalid or expired'
        '403':
          description: 액세스 금지됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Forbidden: User ID mismatch'
        '404':
          description: 읽지 않은 알림 없음
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is no unread notification'
        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'

  /api/users/{userID}/notifications/read:
    get:
      tags:
        - notification
      summary: 읽은 알림 기록 확인
      description: |
        path에 사용자ID를 담아야합니다.

        읽은 알림이 있는 경우 200 코드와 읽은 알림 목록을 리턴합니다.

        요청 구문이 잘못된 경우 400 코드를 리턴합니다.

        Access token이 유효하지 않을 경우 401 코드를 리턴합니다. 이 경우 access token을 재발급 받아야 합니다.

        다른 사용자의 정보에 접근하는 경우 403 코드를 리턴합니다.

        읽은 알림이 없는 경우 404 코드를 리턴합니다.

        그 이외의 경우 500 코드를 리턴합니다.
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserID'
      responses:
        '200':
          description: 읽은 알림 목록
          content:
            application/json:
              examples:
                example1:
                  summary: '일기 관련 알림'
                  value:
                    - notification_id: 793
                      content: 'someone commented on your diary'
                      diary_id: 2940
                      category: 'diary'
                      date: '2024-07-26'
                example2:
                  summary: '친구 관련 알림'
                  value:
                    - notification_id: 728
                      content: 'someone wants to be friends with you'
                      category: 'mate'
                      date: '2024-07-26'
        '400':
          description: 잘못된 요청 구문
          content:
            applicaiton/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Bad request'
        '401':
          description: Access token이 유효하지 않거나 만료됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The access token is invalid or expired'
        '403':
          description: 액세스 금지됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Forbidden: User ID mismatch'
        '404':
          description: 읽은 알림 없음
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is no read notification'
        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'

  /api/users/{userID}/notifications/{notificationID}:
    put:
      tags:
        - notification
      summary: 알림 읽음 상태로 변경
      description: |
        path에 사용자ID와 알림ID를 담아야합니다.

        알림을 읽은 상태로 변경하는데 성공한 경우 200 코드를 리턴합니다.

        요청 구문이 잘못된 경우 400 코드를 리턴합니다.

        Access token이 유효하지 않을 경우 401 코드를 리턴합니다. 이 경우 access token을 재발급 받아야 합니다.

        다른 사용자의 정보에 접근하는 경우 403 코드를 리턴합니다.

        알림ID에 해당하는 알림이 존재하지 않는 경우 404 코드를 리턴합니다.

        그 이외의 경우 500 코드를 리턴합니다.
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/NotificationID'
      responses:
        '200':
          description: 알림 읽음 상태로 변경 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Successfully changed status of the notification'
        '400':
          description: 잘못된 요청 구문
          content:
            applicaiton/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Bad request'
        '401':
          description: Access token이 유효하지 않거나 만료됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The access token is invalid or expired'
        '403':
          description: 액세스 금지됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Forbidden: User ID mismatch'
        '404':
          description: 알림ID에 해당하는 알림이 존재하지 않음
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Not found such notification'
        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'

  /api/diaries:
    post:
      tags:
        - diary
      summary: 일기 작성
      description: |
        일기 작성에 성공한 경우 201 코드와 생성된 일기의 ID 를 리턴합니다.

        요청 구문이 잘못된 경우 400 코드를 리턴합니다.

        Access token이 유효하지 않을 경우 401 코드를 리턴합니다. 이 경우 access token을 재발급 받아야 합니다.

        그 이외의 경우 500 코드를 리턴합니다.

      security:
        - BearerAuth: []
      requestBody:
        description: 일기 작성 내용
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiaryBody'
      responses:
        '201':
          description: 일기 작성 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/DiaryID'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Bad request'
        '401':
          description: Access token이 유효하지 않거나 만료됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The access token is invalid or expired'

        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'

  /api/diaries/{diaryID}:
    put:
      tags:
        - diary
      summary: 작성된 일기 수정
      description: |
        일기 수정에 성공한 경우 200 코드를 리턴합니다.

        요청 구문이 잘못된 경우 400 코드를 리턴합니다.

        Access token이 유효하지 않을 경우 401 코드를 리턴합니다. 이 경우 access token을 재발급 받아야 합니다.

        작성자가 아닌 유저가 시도할 경우 403 코드를 리턴합니다.

        일기가 존재하지 않는 경우 404 코드를 리턴합니다.

        그 이외의 경우 500 코드를 리턴합니다.

      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/DiaryID'

      requestBody:
        description: 일기 수정 내용
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiaryBody'
      responses:
        '200':
          description: 일기 수정 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Successfully changed the diary'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Bad request'
        '401':
          description: Access token이 유효하지 않거나 만료됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The access token is invalid or expired'
        '403':
          description: 일기 수정 권한 없음
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'No permission to edit the diary'
        '404':
          description: 존재하지 않는 일기
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Not found such diary'
        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'
    delete:
      tags:
        - diary
      summary: 일기 삭제
      description: |
        일기 삭제에 성공한 경우 200 코드를 리턴합니다.

        Access token이 유효하지 않을 경우 401 코드를 리턴합니다. 이 경우 access token을 재발급 받아야 합니다.

        작성자가 아닌 유저가 시도할 경우 403 코드를 리턴합니다.

        일기가 존재하지 않는 경우 404 코드를 리턴합니다.

        그 이외의 경우 500 코드를 리턴합니다.
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/DiaryID'
      responses:
        '200':
          description: 일기 삭제 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Successfully deleted the diary'
        '401':
          description: Access token이 유효하지 않거나 만료됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The access token is invalid or expired'
        '403':
          description: 일기 삭제 권한 없음
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'No permission to delete the diary'
        '404':
          description: 존재하지 않는 일기
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Not found such diary'
        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'
    get:
      tags:
        - diary
      summary: 일기 정보 조회
      description: |
        일기 수정에 성공한 경우 200 코드와 일기 정보를 리턴합니다.

        Access token이 유효하지 않을 경우 401 코드를 리턴합니다. 이 경우 access token을 재발급 받아야 합니다.

        권한 없는 유저가 시도할 경우 403 코드를 리턴합니다.

        일기가 존재하지 않는 경우 404 코드를 리턴합니다.

        그 이외의 경우 500 코드를 리턴합니다.

      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/DiaryID'
      responses:
        '200':
          description: 일기 정보
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiaryInfo'
        '401':
          description: Access token이 유효하지 않거나 만료됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The access token is invalid or expired'
        '403':
          description: 일기 접근 권한 없음
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'No permission to access the diary'
        '404':
          description: 존재하지 않는 일기
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Not found such diary'
        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'

  /api/diaries/{diaryID}/like:
    post:
      tags:
        - diary
      summary: 일기에 좋아요 등록
      description: |
        좋아요 등록에 성공한 경우 201 코드와 좋아요 ID를 리턴합니다.

        Access token이 유효하지 않을 경우 401 코드를 리턴합니다. 이 경우 access token을 재발급 받아야 합니다.

        권한 없는 유저가 시도할 경우 403 코드를 리턴합니다.

        일기가 존재하지 않는 경우 404 코드를 리턴합니다.

        그 이외의 경우 500 코드를 리턴합니다.
      security:
        - BearerAuth: []

      parameters:
        - $ref: '#/components/parameters/DiaryID'
      responses:
        '201':
          description: 일기에 좋아요 등록 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LikeID'
        '401':
          description: Access token이 유효하지 않거나 만료됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The access token is invalid or expired'
        '403':
          description: 일기 접근 권한 없음
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'No permission to access the diary'
        '404':
          description: 존재하지 않는 일기
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Not found such diary'

        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'
    delete:
      tags:
        - diary
      summary: 일기에 좋아요 취소
      description: |
        좋아요 취소에 성공한 경우 200 코드를 리턴합니다.

        Access token이 유효하지 않을 경우 401 코드를 리턴합니다. 이 경우 access token을 재발급 받아야 합니다.

        권한 없는 유저가 시도할 경우 403 코드를 리턴합니다.

        일기가 존재하지 않는 경우 또는 좋아요 등록하지 않은 경우 404 코드를 리턴합니다.

        그 이외의 경우 500 코드를 리턴합니다.
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/DiaryID'
      responses:
        '200':
          description: 좋아요 취소 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Successfully canceled the like'
        '401':
          description: Access token이 유효하지 않거나 만료됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The access token is invalid or expired'
        '403':
          description: 일기 접근 권한 없음
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'No permission to access the diary'
        '404':
          description: 존재하지 않는 일기/좋아요
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Not found such diary or like'
        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'
    get:
      tags:
        - diary
      summary: 일기에 좋아요 정보 조회
      description: |
        좋아요 조회에 성공한 경우 200코드와 좋아요 정보를 리턴합니다.

        Access token이 유효하지 않을 경우 401 코드를 리턴합니다. 이 경우 access token을 재발급 받아야 합니다.

        권한 없는 유저가 시도할 경우 403 코드를 리턴합니다.

        일기가 존재하지 않는 경우 404 코드를 리턴합니다.

        그 이외의 경우 500 코드를 리턴합니다.

      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/DiaryID'
      responses:
        '200':
          description: 좋아요 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProfileInfo'
        '401':
          description: Access token이 유효하지 않거나 만료됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The access token is invalid or expired'
        '403':
          description: 일기 접근 권한 없음
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'No permission to access the diary'
        '404':
          description: 존재하지 않는 일기/좋아요
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Not found such diary or like'
        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'

  /api/diaries/calendar/:
    get:
      tags:
        - diary
      summary: 월별 일기 목록 조회
      description: |
        유저ID와 'YYYY-MM' 형식의 조회하고자 하는 달을 쿼리에 담아 요청해야 합니다.

        ex. /api/diaries/calendar?userId=20&month=2024-08

        유저의 월별 일기 목록 조회에 성공한 경우 200코드와 일기 목록을 리턴합니다.

        이 때에 일기 작성자의 ID와 현재 유저 ID를 비교하여 동일 인물인 경우 모든 일기를, 친구 사이인 경우 privacy가 mate, public인 일기를, 아닐 경우 public인 일기를 가져옵니다.

        요청 구문이 잘못된 경우 400 코드를 리턴합니다.

        Access token이 유효하지 않을 경우 401 코드를 리턴합니다. 이 경우 access token을 재발급 받아야 합니다.

        유저가 존재하지 않는 경우 404 코드를 리턴합니다.

        그 이외의 경우 500 코드를 리턴합니다.
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserID_Query'
        - $ref: '#/components/parameters/Month'

      responses:
        '200':
          description: 월별 일기 목록
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_profile:
                    $ref: '#/components/schemas/ProfileInfo'
                  calendar:
                    type: array
                    items:
                      $ref: '#/components/schemas/CalendarItem'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Bad request'
        '401':
          description: Access token이 유효하지 않거나 만료됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The access token is invalid or expired'
        '404':
          description: 존재하지 않는 유저
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Not found such user'
        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'

  /api/diaries/mates:
    get:
      tags:
        - diary
      summary: 친구들이 공개한 일기를 최신순으로 조회
      description: |

        ?page=(페이지번호,기본값:1)&limit=(가져올row수, 기본값:5)

        일기 목록 조회에 성공한 경우 200코드와 일기 목록을 리턴합니다.

        Access token이 유효하지 않을 경우 401 코드를 리턴합니다. 이 경우 access token을 재발급 받아야 합니다.

        그 이외의 경우 500 코드를 리턴합니다.
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: 친구들의 일기 최신순 조회
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DiaryInfo'

        '401':
          description: Access token이 유효하지 않거나 만료됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The access token is invalid or expired'

        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'

  /api/diaries/explore:
    get:
      tags:
        - diary
      summary: 전체 공개 글 피드 조회
      description: |

        ?page=(페이지번호,기본값:1)&limit=(가져올row수, 기본값:5)

        일기 목록 조회에 성공한 경우 200코드와 일기 목록을 리턴합니다.

        Access token이 유효하지 않을 경우 401 코드를 리턴합니다. 이 경우 access token을 재발급 받아야 합니다.

        그 이외의 경우 500 코드를 리턴합니다.
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: 전체 공개 글 피드 조회
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DiaryInfo'
        '401':
          description: Access token이 유효하지 않거나 만료됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The access token is invalid or expired'
        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'

  /api/diaries/myposts:
    get:
      tags:
        - diary
      summary: 작성한 일기 목록 조회
      description: |
        일기 목록 조회에 성공한 경우 200코드와 일기 목록을 리턴합니다.

        Access token이 유효하지 않을 경우 401 코드를 리턴합니다. 이 경우 access token을 재발급 받아야 합니다.

        그 이외의 경우 500 코드를 리턴합니다.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: 내 일기 목록 조회
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DiaryInfo'
        '401':
          description: Access token이 유효하지 않거나 만료됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The access token is invalid or expired'
        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'

  /api/diaries/mymoods:
    get:
      tags:
        - diary
      summary: 기분 변화 통계 조회
      description: |
        조회하고자 하는 달을 'YYYY-MM' 형식으로 쿼리에 담아 요청해야 합니다.

        유저의 기분 변화 통계 조회에 성공한 경우 200코드와 기분 통계를 리턴합니다.

        요청 구문이 잘못된 경우 400 코드를 리턴합니다.

        Access token이 유효하지 않을 경우 401 코드를 리턴합니다. 이 경우 access token을 재발급 받아야 합니다.

        그 이외의 경우 500 코드를 리턴합니다.
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Month'
      responses:
        '200':
          description: 기분 변화 통계
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MoodInfo'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Bad request'
        '401':
          description: Access token이 유효하지 않거나 만료됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The access token is invalid or expired'
        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'

  /api/diaries/{diaryID}/comments:
    get:
      tags:
        - comment
      summary: 댓글 목록 조회
      description: |
        댓글 목록 조회에 성공한 경우 200코드와 댓글 목록을 리턴합니다.

        Access token이 유효하지 않을 경우 401 코드를 리턴합니다. 이 경우 access token을 재발급 받아야 합니다.

        권한 없는 유저가 시도할 경우 403 코드를 리턴합니다.

        일기가 존재하지 않는 경우 404 코드를 리턴합니다.

        그 이외의 경우 500 코드를 리턴합니다.
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/DiaryID'
      responses:
        '200':
          description: 댓글 목록
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentInfo'
        '401':
          description: Access token이 유효하지 않거나 만료됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The access token is invalid or expired'
        '403':
          description: 일기 접근 권한 없음
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'No permission to access the diary'
        '404':
          description: 존재하지 않는 일기
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Not found such diary'

        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'
    post:
      tags:
        - comment
      summary: 댓글 작성
      description: |
        댓글 작성에 성공한 경우 201코드와 댓글 ID를 리턴합니다.

        Access token이 유효하지 않을 경우 401 코드를 리턴합니다. 이 경우 access token을 재발급 받아야 합니다.

        권한 없는 유저가 시도할 경우 403 코드를 리턴합니다.

        일기가 존재하지 않는 경우 404 코드를 리턴합니다.

        그 이외의 경우 500 코드를 리턴합니다.
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/DiaryID'
      requestBody:
        description: 댓글 작성 내용
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentBody'
      responses:
        '201':
          description: 작성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentID'
        '401':
          description: Access token이 유효하지 않거나 만료됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The access token is invalid or expired'
        '403':
          description: 일기 접근 권한 없음
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'No permission to access the diary'
        '404':
          description: 존재하지 않는 일기
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Not found such diary'
        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'

  /api/diaries/{diaryID}/comments/{commentID}:
    put:
      tags:
        - comment
      summary: 댓글 수정
      description: |
        댓글 수정에 성공한 경우 200코드를 리턴합니다.

        Access token이 유효하지 않을 경우 401 코드를 리턴합니다. 이 경우 access token을 재발급 받아야 합니다.

        권한 없는 유저가 시도할 경우 403 코드를 리턴합니다.

        일기 또는 댓글이 존재하지 않는 경우 404 코드를 리턴합니다.

        그 이외의 경우 500 코드를 리턴합니다.
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/DiaryID'
        - $ref: '#/components/parameters/CommentID'
      requestBody:
        description: 댓글 작성 내용
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentBody'
      responses:
        '200':
          description: 수정 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'ㄴ'
        '401':
          description: Access token이 유효하지 않거나 만료됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The access token is invalid or expired'
        '403':
          description: 일기 접근 권한 없음
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'No permission to access the diary'
        '404':
          description: 존재하지 않는 일기 또는 댓글
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Not found such diary or comment'
        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'
    delete:
      tags:
        - comment
      summary: 댓글 삭제
      description: |
        댓글 삭제에 성공한 경우 200코드를 리턴합니다.

        Access token이 유효하지 않을 경우 401 코드를 리턴합니다. 이 경우 access token을 재발급 받아야 합니다.

        권한 없는 유저가 시도할 경우 403 코드를 리턴합니다.

        일기 또는 댓글이 존재하지 않는 경우 404 코드를 리턴합니다.

        그 이외의 경우 500 코드를 리턴합니다.
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/DiaryID'
        - $ref: '#/components/parameters/CommentID'

      responses:
        '200':
          description: 삭제 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '401':
          description: Access token이 유효하지 않거나 만료됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The access token is invalid or expired'
        '403':
          description: 일기 접근 권한 없음
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'No permission to access the diary'
        '404':
          description: 존재하지 않는 일기 또는 댓글
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Not found such diary or comment'
        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'
  /api/weather:
    get:
      tags:
        - weather
      summary: 오늘의 날씨정보 조회
      description: |
        날씨정보 조회에 성공한 경우 200코드를 리턴합니다.

        요청 구문이 잘못된 경우 400 코드를 리턴합니다.

        Access token이 유효하지 않을 경우 401 코드를 리턴합니다. 이 경우 access token을 재발급 받아야 합니다.

        그 이외의 경우 500 코드를 리턴합니다.

      parameters:
        - $ref: '#/components/parameters/Latitude'
        - $ref: '#/components/parameters/Longitude'

      responses:
        '200':
          description: 오늘의 날씨 정보
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeatherInfo'

        '400':
          description: 잘못된 요청 구문
          content:
            applicaiton/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Bad request'

        '401':
          description: Access token이 유효하지 않거나 만료됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The access token is invalid or expired'

        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'

  /api/users/{userID}/music:
    get:
      tags:
        - user
        - music
      summary: 음악 사용기록 조회
      description: |
        ?page=(페이지번호,기본값:1)&limit=(가져올row수, 기본값:5)

        음악정보 조회에 성공한 경우 200코드와 친구 관계나 privacy에 상관 없이 모든 음악 정보를 리턴합니다.

        유저가 존재하지 않는 경우 404 코드를 리턴합니다.

        그 이외의 경우 500 코드를 리턴합니다.
      parameters:
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: 일기 음악 정보
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_profile:
                    $ref: '#/components/schemas/ProfileInfo'
                  musics:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/MusicInfo'
                        - type: object
                          properties:
                            created_at:
                              type: string
                              format: date

        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'

  /api/aws/images:
    post:
      tags:
        - AWS
      summary: S3 버킷 이미지 업로드 요청
      description: |
        이미지 업로드에 성공한 경우 200 코드와 파일명을 리턴합니다.

        요청 구문이 잘못된 경우 400 코드를 리턴합니다.

        Access token이 유효하지 않을 경우 401 코드를 리턴합니다. 이 경우 access token을 재발급 받아야 합니다.

        그 이외의 경우 500 코드를 리턴합니다.
      security:
        - BearerAuth: []
      requestBody:
        description: |
          파일명 배열

          업로드할 이미지 배열
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/S3body'
        required: true
      responses:
        '200':
          description: 이미지 업로드 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadedUrl'
        '400':
          description: 잘못된 요청 구문
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'Bad request'
        '401':
          description: Access token이 유효하지 않거나 만료됨
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'The access token is invalid or expired'
        '500':
          description: 내부 서버 에러
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Message'
                example:
                  message: 'There is something wrong with the server'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Message:
      type: object
      properties:
        message:
          type: string
          example: 'The link is valid'

    SignUpBody:
      type: object
      properties:
        service_provider:
          type: string
          example: 'google'
        authorization_code:
          type: string
          example: 'example code'
        state:
          type: string
          example: 'state value'

    AccessToken:
      type: object
      properties:
        access_token:
          type: string
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'

    RefreshToken:
      type: object
      properties:
        refresh_token:
          type: string
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'

    UserInfo:
      type: object
      properties:
        user_id:
          type: integer
          example: 58
        profile_img_url:
          type: string
          example: 'S3 bucket image url'
        profile_background_img_url:
          type: string
          example: 'S3 bucket image url'
        nickname:
          type: string
          example: 'musseuk'
        email_address:
          type: string
          example: 'musseuk@example.com'
        mate_count:
          type: integer
          example: 15
        diary_count:
          type: integer
          example: 27

    MateInfo:
      type: object
      properties:
        user_id:
          type: integer
          example: 3798
        nickname:
          type: string
          example: 'loopy'
        profile_img_url:
          type: string
          example: 'S3 bucket image url'

    RequestInfo:
      type: object
      properties:
        user_id:
          type: integer
          example: 3798
        nickname:
          type: string
          example: 'loopy'
        profile_img_url:
          type: string
          example: 'S3 bucket image url'
        request_id:
          type: integer
          example: 157

    ImgURL:
      type: object
      properties:
        img_url:
          type: string
          example: 'S3 bucket image url'

    UserID:
      type: object
      properties:
        user_id:
          type: integer
          example: 986

    MateID:
      type: object
      properties:
        mate_id:
          type: integer
          example: 986

    RequestID:
      type: object
      properties:
        request_id:
          type: integer
          example: 157

    DiaryID:
      type: object
      properties:
        diary_id:
          type: integer
          example: 157

    DiaryInfo:
      type: object
      properties:
        id:
          type: integer
          example: 58
        user_profile:
          $ref: '#/components/schemas/ProfileInfo'
        like_count:
          type: integer
          example: 99
        created_at:
          type: string
          example: '2024-07-31'
        body:
          $ref: '#/components/schemas/DiaryBody'
        liked:
          type: boolean
          example: true
          description: '현재 유저가 이전에 일기에 좋아요를 눌렀는지 여부'

    DiaryBody:
      type: object
      properties:
        title:
          type: string
          example: 'diary title'
        content:
          type: string
          example: 'diary content'
        img_urls:
          type: array
          items:
            type: string
            example: 'S3 bucket image url'
        mood:
          type: string
          example: 'happy'
        emoji:
          type: string
          example: '&#128057;'
        privacy:
          type: string
          example: 'mate'
        music:
          $ref: '#/components/schemas/MusicInfo'
        weather:
          $ref: '#/components/schemas/WeatherInfo'
        background_color:
          type: string
          description: 배경화면 색상

    WeatherInfo:
      type: object
      properties:
        location:
          type: string
          example: 'Seoul'
        icon:
          type: string
          example: '맑음'
        avg_temperature:
          type: integer
          example: 32

    UserNickname:
      type: object
      properties:
        nickname:
          type: string
          example: 'musseuk'

    LikeID:
      type: object
      properties:
        like_id:
          type: integer
          example: 22

    HasPosts:
      type: object
      properties:
        has_posts:
          type: boolean
          example: true

    CalendarItem:
      type: object
      properties:
        date:
          type: string
          format: date
          description: 일기 작성 날짜
        diary_id:
          type: integer
          description: 일기 ID
        emoji:
          type: string
          description: 기록된 이모지

    MoodInfo:
      type: object
      properties:
        date:
          type: string
          format: date
          description: 일기 작성 날짜
        diary_id:
          type: integer
          description: 일기 ID
        mood:
          type: string
          description: 기분

    CommentInfo:
      type: object
      properties:
        writer_user_profile:
          $ref: '#/components/schemas/ProfileInfo'
          description: 댓글 작성자 프로필
        mentioned_user_profile:
          $ref: '#/components/schemas/ProfileInfo'       
          description: 멘션된 유저 프로필
        created_at:
          type: string
          format: date
          description: 댓글 작성 날짜
        diary_id:
          type: integer
          description: 일기 ID
        content:
          type: string
          description: 댓글 내용
          
    CommentBody:
      type: object
      properties:
        content:
          type: string
          description: 댓글 내용
        mentioned_user_id:
          type: string
          description: 멘션된 유저 ID

    CommentID:
      type: object
      properties:
        comment_id:
          type: integer
          example: 22

    MusicInfo:
      type: object
      properties:
        music_url:
          type: string
          example: 'www.youtube.com/'
        title:
          type: string
          example: 'music title'
        artist:
          type: string
          example: 'music artist'

    LocationInfo:
      type: object
      properties:
        longitude:
          type: string
          example: '111.111'
        latitude:
          type: string
          example: '222.222'

    ProfileInfo:
      type: object
      properties:
        user_id:
          type: integer
          example: 22
        profile_img_url:
          type: string
          example: 'www.image.com'
        nickname:
          type: string
          example: 'nickname'

    S3body:
      type: object
      properties:
        filenames:
          type: array
          items:
            type: string
          description: '파일명 ex) 30/diary/23_1.png, 30/diary/23_2.jpg'
          example:
            - 30/diary/23_1.png
            - 30/diary/23_2.jpg
        images:
          type: array
          items:
            type: string
          format: binary
          description: '업로드할 이미지'

    UploadedUrl:
      type: object
      properties:
        img_urls:
          type: array
          items:
            type: string
          example:
            - '30/diary/23_1.png'
            - '30/diary/23_2.jpg'

  parameters:
    UserID:
      name: userID
      in: path
      required: true
      schema:
        type: integer
        example: 2764

    UserID_Query:
      name: userID
      in: query
      required: true
      schema:
        type: integer
        example: 2764

    MateID:
      name: mateID
      in: path
      required: true
      schema:
        type: integer
        example: 658

    RequestID:
      name: requestID
      in: path
      required: true
      schema:
        type: integer
        example: 1427

    NotificationID:
      name: notificationID
      in: path
      required: true
      schema:
        type: integer
        example: 14

    UserNickname:
      name: nickname
      in: query
      schema:
        type: string
        example: 'musseuk'

    UserEmail:
      name: email
      in: query
      schema:
        type: string
        example: 'musseuk@example.com'

    DiaryID:
      name: diaryID
      in: path
      required: true
      schema:
        type: integer
        example: 2764

    CommentID:
      name: commentID
      in: path
      required: true
      schema:
        type: integer
        example: 2764

    LikeID:
      name: likeID
      in: path
      required: true
      schema:
        type: integer
        example: 22

    Month:
      name: month
      in: query
      description: 조회할 월
      required: true
      schema:
        type: string
        example: '2024-07'

    Longitude:
      name: longitude
      in: query
      description: 경도
      required: true
      schema:
        type: string
        example: '111.111'

    Latitude:
      name: latitude
      in: query
      description: 위도
      required: true
      schema:
        type: string
        example: '222.222'

    Page:
      name: page
      in: query
      description: 페이지번호 (기본값 1)
      schema:
        type: number
        example: 1

    Limit:
      name: limit
      in: query
      description: 가져올 row의 수 (기본값 5)
      schema:
        type: number
        example: 5
